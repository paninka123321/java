import { LitElement, html, css } from 'lit';
import { property, state } from 'lit/decorators.js';

export class UserWidget extends LitElement {
  // === PROPS (można zmieniać z zewnątrz) ===
  @property({ type: Number }) users: number = 93656;
  @property({ type: Number }) change: number = 346;
  @property({ type: String }) title: string = 'Total Users';
  @property({ type: Boolean }) autoUpdate: boolean = true;

  // wewnętrzny stan do animacji
  @state() private _animClass: string = '';

  static styles = css`
    :host {
      font-family: 'Segoe UI', sans-serif;
      background: #fff;
      border-radius: 16px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
      padding: 16px 20px;
      width: 220px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      gap: 8px;
      transition: transform 0.2s ease;
    }

    :host(:hover) {
      transform: translateY(-2px);
    }

    .user-title {
      font-size: 13px;
      font-weight: 600;
      color: #444;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .user-value-row {
      display: flex;
      align-items: baseline;
      justify-content: space-between;
    }

    .user-value {
      font-size: 28px;
      font-weight: 700;
      color: #000;
      letter-spacing: 0.5px;
    }

    .user-change {
      display: flex;
      align-items: center;
      gap: 4px;
      font-size: 13px;
      font-weight: 600;
    }

    .user-change svg {
      width: 12px;
      height: 12px;
      fill: none;
      stroke-width: 2;
    }

    .animate {
      animation: fadeIn 0.6s ease;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(3px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  `;

  private _interval?: number;

  connectedCallback() {
    super.connectedCallback();
    if (this.autoUpdate) {
      this._interval = window.setInterval(() => this._simulateChange(), 3000);
    }
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    if (this._interval) clearInterval(this._interval);
  }

  private _simulateChange() {
    const diff = Math.floor(Math.random() * 600 - 300);
    this.change = diff;
    this.users += diff;

    // animacja
    this._animClass = '';
    setTimeout(() => (this._animClass = 'animate'), 10);
  }

  private _getColor(diff: number) {
    return diff >= 0 ? '#4cd964' : '#ff3b30';
  }

  render() {
    const color = this._getColor(this.change);
    const arrowPath = this.change >= 0 ? 'M18 15l-6-6-6 6' : 'M6 9l6 6 6-6';

    return html`
      <div class="user-title">${this.title}</div>
      <div class="user-value-row">
        <div class="user-value ${this._animClass}">
          ${this.users.toLocaleString('pl-PL')}
        </div>
        <div class="user-change" style="color: ${color}">
          <svg viewBox="0 0 24 24" style="stroke:${color}">
            <path d=${arrowPath}></path>
          </svg>
          ${this.change >= 0 ? '+' : ''}${this.change}
        </div>
      </div>
    `;
  }
}

customElements.define('user-widget', UserWidget);

<!DOCTYPE html>
<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Widget — Liczba użytkowników</title>
    <script type="module" src="./user-widget.js"></script>
  </head>
  <body style="background:#f7f7f7;display:flex;justify-content:center;align-items:center;height:100vh;">
    <user-widget></user-widget>

    <script>
      // Przykład dynamicznej aktualizacji z zewnątrz:
      const widget = document.querySelector('user-widget');
      setTimeout(() => {
        widget.users = 120000;
        widget.change = 250;
      }, 5000);
    </script>
  </body>
</html>
