<!DOCTYPE html>
<html lang="pl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Widget Baterii</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>

  <!-- pojedynczy widget baterii -->
  <div class="battery-widget">
    <canvas id="batteryCanvas" width="100" height="100"></canvas>
    <div class="battery-content">
      <div class="battery-icon">🔋</div> <!-- ikonka w środku -->
      <div class="battery-percent" id="batteryPercent">75%</div> <!-- tekst procentowy -->
    </div>
  </div>

  <script src="script.js"></script>
</body>
</html>


/* wygląd całego widgetu */
.battery-widget {
  position: relative;
  width: 100px;
  height: 100px;
  background: #1c1c1e; /* ciemne tło jak w iOS */
  border-radius: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 10px rgba(0,0,0,0.3);
}

/* pozycjonowanie ikonki i tekstu w środku */
.battery-content {
  position: absolute;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: white;
  font-family: sans-serif;
}

.battery-icon {
  font-size: 22px;
  margin-bottom: 4px;
}

.battery-percent {
  font-size: 16px;
  font-weight: 600;
}

/* styl tła i paska na canvasie */
canvas {
  transform: rotate(-90deg); /* obrót żeby start był u góry */
}


const canvas = document.getElementById("batteryCanvas");
const ctx = canvas.getContext("2d");
const percentText = document.getElementById("batteryPercent");

let batteryValue = 75; // wartość początkowa (w procentach)
const color = "#4cd964"; // zielony kolor paska (stały, jak chciałaś)

/**
 * Funkcja rysująca okrąg procentowy (gauge)
 */
function drawBatteryGauge(value) {
  const size = canvas.width;
  const center = size / 2;
  const radius = center - 8;
  const startAngle = 0;
  const endAngle = 2 * Math.PI;

  ctx.clearRect(0, 0, size, size);

  // 1️⃣ Tło (pełne kółko szare)
  ctx.beginPath();
  ctx.arc(center, center, radius, startAngle, endAngle);
  ctx.strokeStyle = "#3a3a3c"; // ciemnoszary pierścień
  ctx.lineWidth = 10;
  ctx.stroke();

  // 2️⃣ Pasek pokazujący poziom baterii
  const fraction = Math.min(Math.max(value / 100, 0), 1); // ograniczamy do 0–1
  const progressAngle = startAngle + fraction * endAngle;

  ctx.beginPath();
  ctx.arc(center, center, radius, startAngle, progressAngle);
  ctx.strokeStyle = color; // kolor paska
  ctx.lineWidth = 10;
  ctx.lineCap = "round";
  ctx.stroke();

  // 3️⃣ Tekst aktualizacji (w środku)
  percentText.textContent = `${Math.round(value)}%`;
}

/**
 * Funkcja do dynamicznej zmiany wartości baterii
 * np. updateGauge(42)
 */
function updateGauge(newValue) {
  batteryValue = newValue;
  drawBatteryGauge(batteryValue);
}

// pierwsze rysowanie
drawBatteryGauge(batteryValue);

// PRZYKŁAD: symulacja zmian (można usunąć)
let demoVal = 75;
setInterval(() => {
  demoVal = (demoVal + 5) % 101;
  updateGauge(demoVal);
}, 2000);
