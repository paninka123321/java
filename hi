const canvas = document.getElementById("gaugeCanvas");
const ctx = canvas.getContext("2d");

// example values
let settings = {
  mode: "number", // "percent"
  min: 0,
  max: 150,
  value: 108.53,
  colorDirection: "red-green", // "green-red"
  thresholds: [0.25, 0.50, 0.75], // punkty zmiany koloru 
  };

function drawGauge() {
  const { min, max, value, colorDirection, thresholds } = settings;
  const startAngle = Math.PI;  // półkole - miara w radianach
  const endAngle = 2 * Math.PI;
  const radius = 80;
  const centerX = canvas.width / 2;
  const centerY = canvas.height;

  // Tło (nieosiągnięte)
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.beginPath();
  ctx.arc(centerX, centerY, radius, startAngle, endAngle);
  ctx.strokeStyle = "#ddd";
  ctx.lineWidth = 12;
  ctx.stroke();

  // Wartość aktualna
  const fraction = (value - min) / (max - min); // ułamek całości
  const valueAngle = startAngle + fraction * Math.PI; // po lewo jest pi po prawo wartosc max to 2 pi

  // ustawienia skali kolorów
  const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
  if (colorDirection === "red-green") {
    gradient.addColorStop(thresholds[0], "red");
    gradient.addColorStop(thresholds[1], "orange");
    gradient.addColorStop(thresholds[2], "green");
  } else {
    gradient.addColorStop(thresholds[0], "green");
    gradient.addColorStop(thresholds[1], "orange");
    gradient.addColorStop(thresholds[2], "red");
  }

  ctx.beginPath();
  ctx.arc(centerX, centerY, radius, startAngle, valueAngle);
  // OPCJA DLA GRADIENTU
  // ctx.strokeStyle = gradient;

  ctx.lineWidth = 12;
  ctx.stroke();
  // OPCJA DLA CAŁEJ LINI KOLORU:
    // Kolory segmentów
  let colors = ["red","yellow","green"];
  if (colorDirection === "green-red") colors = colors.reverse();

  let prev = 0;
  for (let i = 0; i < thresholds.length; i++) {
    const segEnd = thresholds[i];
    if (fraction <= prev) break; // jeśli wartość jest mniejsza niż początek segmentu, kończymy

    ctx.beginPath();
    ctx.arc(
      centerX,
      centerY,
      radius,
      startAngle + prev * Math.PI,
      startAngle + Math.min(fraction, segEnd) * Math.PI
    );
    ctx.strokeStyle = colors[i];
    ctx.lineWidth = 12;
    ctx.stroke();

    prev = segEnd;
  }
// koniec opcji 
  // Jak wyswietlac tekst w zaleznosci czy procenty czy liczby 
  // dodatkowo opcja tofixed pozwala nam zdefiniować do ilu miejsc 
  // po przecinku zaookraglamy wartość - mateamtyczne zaokrąglenie
  const displayValue = settings.mode === "percent"
    ? ((value / max) * 100).toFixed(1) + "%"
    : value.toFixed(1);
  document.getElementById("gaugeValue").textContent = displayValue; 
}

// PANEL USTAWIŃ
const settingsBtn = document.querySelector(".settings-btn"); // czyli przycisk ustawień
const panel = document.getElementById("settingsPanel");
const applyBtn = document.getElementById("applySettings"); //przycisk zastosowywania zmian

//akcja - pokaż/ukryj panel
settingsBtn.addEventListener("click", () => {
    // uzupelnij pola wartościami domyślnymi 
    document.getElementById("displayMode").value = settings.mode;
    document.getElementById("colorDirection").value = settings.colorDirection;
    document.getElementById("thresholdsInput").value = settings.thresholds.join(",");
    // akcja - pokaż/ukryj
    panel.classList.toggle("hidden")
});

//akcja - zastosowanie zmian
applyBtn.addEventListener("click", () =>
{
    const mode = document.getElementById("displayMode").value; //procenty czy liczby
    const colorDirection = document.getElementById("colorDirection").value;
    const thresholdsInput = document.getElementById("thresholdsInput").value; //co ile zmieniają się kolory

    const thresholds = thresholdsInput
    .split(",")
    .map(v => parseFloat(v.trim()))
    .filter(v => !isNaN(v));
    
    settings.mode = mode;
    settings.colorDirection = colorDirection;
    if (thresholds.length > 0) settings.thresholds = thresholds;

    // rysowanie koła
    updateGauge(2);

    panel.classList.add("hidden");

    // zapisywanie ustawień w użytkownika w localStorage, żeby zawsze miał swój ulubiony widok
    localStorage.setItem("gaugeSettings", JSON.stringify(settings));
});

// odczytywanie ustawień localStorage przy stacie 
window.addEventListener("load", () => {
    const saved = localStorage.getItem("gaugeSettings");
    if (saved) {
        settings = JSON.parse(saved);
        drawGauge();
    }
})

// symulacja zwracanej temp:
const sensorsData = {
    1: 45.2,
    2: 110.76,
    3: 30.105
}

function getTemperature(sensorId){
    return sensorsData[sensorId] || 0;
}
function updateGauge(sensorId) {
    const temp = getTemperature(sensorId);
    settings.value = temp;
    drawGauge();
}
